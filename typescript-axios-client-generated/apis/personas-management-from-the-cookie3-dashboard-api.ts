/* tslint:disable */
/* eslint-disable */
/**
 * Personas APIs Definition
 * # About Us **Persona Builder** Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@personas.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse201 } from '../models';
import { Persona } from '../models';
import { PersonasBody } from '../models';
import { PersonasBody1 } from '../models';
/**
 * PersonasManagementFromTheCookie3DashboardApi - axios parameter creator
 * @export
 */
export const PersonasManagementFromTheCookie3DashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete Persona for specific user
         * @summary Delete Persona
         * @param {number} personaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePersona: async (personaId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personaId' is not null or undefined
            if (personaId === null || personaId === undefined) {
                throw new RequiredError('personaId','Required parameter personaId was null or undefined when calling deletePersona.');
            }
            const localVarPath = `/personas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            if (personaId !== undefined) {
                localVarQueryParameter['personaId'] = personaId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List of all user personas(default the same for everybody + predefined)
         * @summary List of all user personas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonas: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/personas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Persona for specific user
         * @summary Create Persona
         * @param {PersonasBody1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        savePersona: async (body?: PersonasBody1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/personas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update specific user Persona
         * @summary Update Persona
         * @param {PersonasBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePersona: async (body?: PersonasBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/personas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonasManagementFromTheCookie3DashboardApi - functional programming interface
 * @export
 */
export const PersonasManagementFromTheCookie3DashboardApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete Persona for specific user
         * @summary Delete Persona
         * @param {number} personaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePersona(personaId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PersonasManagementFromTheCookie3DashboardApiAxiosParamCreator(configuration).deletePersona(personaId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List of all user personas(default the same for everybody + predefined)
         * @summary List of all user personas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonas(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Persona>>>> {
            const localVarAxiosArgs = await PersonasManagementFromTheCookie3DashboardApiAxiosParamCreator(configuration).getPersonas(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create Persona for specific user
         * @summary Create Persona
         * @param {PersonasBody1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async savePersona(body?: PersonasBody1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse201>>> {
            const localVarAxiosArgs = await PersonasManagementFromTheCookie3DashboardApiAxiosParamCreator(configuration).savePersona(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update specific user Persona
         * @summary Update Persona
         * @param {PersonasBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePersona(body?: PersonasBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PersonasManagementFromTheCookie3DashboardApiAxiosParamCreator(configuration).updatePersona(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PersonasManagementFromTheCookie3DashboardApi - factory interface
 * @export
 */
export const PersonasManagementFromTheCookie3DashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete Persona for specific user
         * @summary Delete Persona
         * @param {number} personaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePersona(personaId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PersonasManagementFromTheCookie3DashboardApiFp(configuration).deletePersona(personaId, options).then((request) => request(axios, basePath));
        },
        /**
         * List of all user personas(default the same for everybody + predefined)
         * @summary List of all user personas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonas(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Persona>>> {
            return PersonasManagementFromTheCookie3DashboardApiFp(configuration).getPersonas(options).then((request) => request(axios, basePath));
        },
        /**
         * Create Persona for specific user
         * @summary Create Persona
         * @param {PersonasBody1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async savePersona(body?: PersonasBody1, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse201>> {
            return PersonasManagementFromTheCookie3DashboardApiFp(configuration).savePersona(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update specific user Persona
         * @summary Update Persona
         * @param {PersonasBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePersona(body?: PersonasBody, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PersonasManagementFromTheCookie3DashboardApiFp(configuration).updatePersona(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PersonasManagementFromTheCookie3DashboardApi - object-oriented interface
 * @export
 * @class PersonasManagementFromTheCookie3DashboardApi
 * @extends {BaseAPI}
 */
export class PersonasManagementFromTheCookie3DashboardApi extends BaseAPI {
    /**
     * Delete Persona for specific user
     * @summary Delete Persona
     * @param {number} personaId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonasManagementFromTheCookie3DashboardApi
     */
    public async deletePersona(personaId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PersonasManagementFromTheCookie3DashboardApiFp(this.configuration).deletePersona(personaId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List of all user personas(default the same for everybody + predefined)
     * @summary List of all user personas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonasManagementFromTheCookie3DashboardApi
     */
    public async getPersonas(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Persona>>> {
        return PersonasManagementFromTheCookie3DashboardApiFp(this.configuration).getPersonas(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create Persona for specific user
     * @summary Create Persona
     * @param {PersonasBody1} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonasManagementFromTheCookie3DashboardApi
     */
    public async savePersona(body?: PersonasBody1, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse201>> {
        return PersonasManagementFromTheCookie3DashboardApiFp(this.configuration).savePersona(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update specific user Persona
     * @summary Update Persona
     * @param {PersonasBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonasManagementFromTheCookie3DashboardApi
     */
    public async updatePersona(body?: PersonasBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PersonasManagementFromTheCookie3DashboardApiFp(this.configuration).updatePersona(body, options).then((request) => request(this.axios, this.basePath));
    }
}
